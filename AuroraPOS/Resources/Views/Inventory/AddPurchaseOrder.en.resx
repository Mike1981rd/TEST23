<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Action" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Active" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="Add Item" xml:space="preserve">
    <value>Add Item</value>
  </data>
  <data name="Add Supplier" xml:space="preserve">
    <value>Add Supplier</value>
  </data>
  <data name="Add/Update Purchase Order" xml:space="preserve">
    <value>Add/Update Purchase Order</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="Are you sure to delete the supplier?" xml:space="preserve">
    <value>Are you sure to delete the supplier?</value>
  </data>
  <data name="Article" xml:space="preserve">
    <value>Article</value>
  </data>
  <data name="Base Taxable" xml:space="preserve">
    <value>Base Taxable</value>
  </data>
  <data name="Brand" xml:space="preserve">
    <value>Brand</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Cell Phone" xml:space="preserve">
    <value>Cell Phone</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Discount" xml:space="preserve">
    <value>Discount</value>
  </data>
  <data name="Extra Amount" xml:space="preserve">
    <value>Extra Amount</value>
  </data>
  <data name="Failed to delete the supplier." xml:space="preserve">
    <value>Failed to delete the supplier.</value>
  </data>
  <data name="Gross Amount" xml:space="preserve">
    <value>Gross Amount</value>
  </data>
  <data name="Imported" xml:space="preserve">
    <value>Imported</value>
  </data>
  <data name="InActive" xml:space="preserve">
    <value>InActive</value>
  </data>
  <data name="Manage your Suppliers" xml:space="preserve">
    <value>Manage your Suppliers</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NCF" xml:space="preserve">
    <value>NCF</value>
  </data>
  <data name="Net Total" xml:space="preserve">
    <value>Net Total</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="Order Date" xml:space="preserve">
    <value>Order Date</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="QTY" xml:space="preserve">
    <value>QTY</value>
  </data>
  <data name="RNC" xml:space="preserve">
    <value>RNC</value>
  </data>
  <data name="Seller" xml:space="preserve">
    <value>Seller</value>
  </data>
  <data name="Shipping" xml:space="preserve">
    <value>Shipping</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Sub Total" xml:space="preserve">
    <value>Sub Total</value>
  </data>
  <data name="Submit" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Supplier" xml:space="preserve">
    <value>Supplier</value>
  </data>
  <data name="Supplier Formula" xml:space="preserve">
    <value>Requires Ncf</value>
  </data>
  <data name="Supplier List" xml:space="preserve">
    <value>Supplier List</value>
  </data>
  <data name="Tax" xml:space="preserve">
    <value>Tax</value>
  </data>
  <data name="Tax Amount" xml:space="preserve">
    <value>Tax Amount</value>
  </data>
  <data name="Tax Included" xml:space="preserve">
    <value>Tax Included</value>
  </data>
  <data name="Terms" xml:space="preserve">
    <value>Terms</value>
  </data>
  <data name="There was an error to process the request." xml:space="preserve">
    <value>There was an error to process the request.</value>
  </data>
  <data name="Total" xml:space="preserve">
    <value>Total</value>
  </data>
  <data name="Total Net" xml:space="preserve">
    <value>Total Net</value>
  </data>
  <data name="Unit" xml:space="preserve">
    <value>Unit</value>
  </data>
  <data name="Warehouse" xml:space="preserve">
    <value>Warehouse</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="Yes, delete it!" xml:space="preserve">
    <value>Yes, delete it!</value>
  </data>
  <data name="Add Warehouse" xml:space="preserve">
    <value>Add Warehouse</value>
  </data>
  <data name="All Supplier" xml:space="preserve">
    <value>All Suppliers</value>
  </data>
  <data name="Cancelled" xml:space="preserve">
    <value>Cancelled</value>
  </data>
  <data name="Choose supplier" xml:space="preserve">
    <value>Select Supplier</value>
  </data>
  <data name="Choose unit" xml:space="preserve">
    <value>Select Unit</value>
  </data>
  <data name="Choose warehouse" xml:space="preserve">
    <value>Select Warehouse</value>
  </data>
  <data name="Edit Warehouse" xml:space="preserve">
    <value>Edit Warehouse</value>
  </data>
  <data name="Failed to update the purchase order." xml:space="preserve">
    <value>Failed to Update</value>
  </data>
  <data name="Failed to update the status." xml:space="preserve">
    <value>Failed to Update</value>
  </data>
  <data name="Failed to update the warehouse." xml:space="preserve">
    <value>Failed to Update</value>
  </data>
  <data name="Order" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="Ordered" xml:space="preserve">
    <value>Ordered</value>
  </data>
  <data name="Pending" xml:space="preserve">
    <value>Pending</value>
  </data>
  <data name="Please fill in the inputs." xml:space="preserve">
    <value>Please Fill info</value>
  </data>
  <data name="Please select the supplier." xml:space="preserve">
    <value>Please Select Supplier</value>
  </data>
  <data name="Received" xml:space="preserve">
    <value>Received</value>
  </data>
  <data name="Report" xml:space="preserve">
    <value>Pdf</value>
  </data>
  <data name="Return" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Tax Name" xml:space="preserve">
    <value>Tax Name</value>
  </data>
  <data name="The article is inactive." xml:space="preserve">
    <value>Article is Inactive</value>
  </data>
  <data name="The NCF should be input because the supplier is formal." xml:space="preserve">
    <value>Please Enter NCF #</value>
  </data>
  <data name="The NCF should be unique." xml:space="preserve">
    <value>NCF should be unique</value>
  </data>
  <data name="This warehouse is inactive." xml:space="preserve">
    <value>This Warehouse is Inactive</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="You need to fill in the NCF to receive." xml:space="preserve">
    <value>Requires NCF #</value>
  </data>
</root>