<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Action" xml:space="preserve">
    <value>Acción</value>
  </data>
  <data name="Active" xml:space="preserve">
    <value>Activo</value>
  </data>
  <data name="Add Warehouse" xml:space="preserve">
    <value>Añadir almacén</value>
  </data>
  <data name="Are you sure to update the inventory?" xml:space="preserve">
    <value>¿Estás seguro de actualizar el inventario?</value>
  </data>
  <data name="Barcode" xml:space="preserve">
    <value>Código de barras</value>
  </data>
  <data name="Brand" xml:space="preserve">
    <value>Marca</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Categoría</value>
  </data>
  <data name="Choose category" xml:space="preserve">
    <value>Elegir la categoría</value>
  </data>
  <data name="Choose sub category" xml:space="preserve">
    <value>Elegir subcategoría</value>
  </data>
  <data name="Choose warehouse" xml:space="preserve">
    <value>Elegir almacén</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Cerrar</value>
  </data>
  <data name="Difference" xml:space="preserve">
    <value>Diferencia</value>
  </data>
  <data name="Edit Warehouse" xml:space="preserve">
    <value>Editar almacén</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Failed to update the inventory." xml:space="preserve">
    <value>No se pudo actualizar el inventario.</value>
  </data>
  <data name="Failed to update the warehouse." xml:space="preserve">
    <value>No se pudo actualizar el almacén.</value>
  </data>
  <data name="InActive" xml:space="preserve">
    <value>Inactivo</value>
  </data>
  <data name="Manage Physical Count" xml:space="preserve">
    <value>Conteo físico</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Nombre</value>
  </data>
  <data name="New Qty" xml:space="preserve">
    <value>Nueva cantidad</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Teléfono</value>
  </data>
  <data name="Please fill in the inputs." xml:space="preserve">
    <value>Por favor complete las entradas.</value>
  </data>
  <data name="QTY" xml:space="preserve">
    <value>Qty</value>
  </data>
  <data name="Scanning" xml:space="preserve">
    <value>Lector</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Buscar</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Estado</value>
  </data>
  <data name="Stock QTY" xml:space="preserve">
    <value>Existencia</value>
  </data>
  <data name="Sub Category" xml:space="preserve">
    <value>Subcategoría</value>
  </data>
  <data name="Submit" xml:space="preserve">
    <value>Guardar</value>
  </data>
  <data name="There was an error to process the request." xml:space="preserve">
    <value>Hubo un error al procesar la solicitud.</value>
  </data>
  <data name="This warehouse is inactive." xml:space="preserve">
    <value>Este almacén está inactivo.</value>
  </data>
  <data name="Total QTY" xml:space="preserve">
    <value>Total </value>
  </data>
  <data name="UNIT" xml:space="preserve">
    <value>Unidad</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Actualizar</value>
  </data>
  <data name="Update All" xml:space="preserve">
    <value>Actualizar todo</value>
  </data>
  <data name="Update inventory" xml:space="preserve">
    <value>Actualizar inventario</value>
  </data>
  <data name="Update Warehouse Item" xml:space="preserve">
    <value>Actualizar artículo de almacén</value>
  </data>
  <data name="Warehosue List" xml:space="preserve">
    <value>Lista de almacenes</value>
  </data>
  <data name="Warehouse" xml:space="preserve">
    <value>Almacén</value>
  </data>
  <data name="Warehouse name" xml:space="preserve">
    <value>Nombre del almacén</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Sí</value>
  </data>
</root>