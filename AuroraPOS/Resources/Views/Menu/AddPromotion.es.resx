<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Action" xml:space="preserve">
    <value>Acción</value>
  </data>
  <data name="Active" xml:space="preserve">
    <value>Activo</value>
  </data>
  <data name="Add/Update Promotion" xml:space="preserve">
    <value>Añadir/Actualizar Promoción</value>
  </data>
  <data name="All Day" xml:space="preserve">
    <value>Todo el dia</value>
  </data>
  <data name="Amount" xml:space="preserve">
    <value>Cantidad</value>
  </data>
  <data name="Amount Type" xml:space="preserve">
    <value>Tipo de cantidad</value>
  </data>
  <data name="Apply Type" xml:space="preserve">
    <value>Aplicar tipo</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Categoría</value>
  </data>
  <data name="Create Promotion" xml:space="preserve">
    <value>Crear promoción</value>
  </data>
  <data name="Duration" xml:space="preserve">
    <value>Duración de la Promocion</value>
  </data>
  <data name="End After" xml:space="preserve">
    <value>Terminar después</value>
  </data>
  <data name="End Date" xml:space="preserve">
    <value>Fecha final</value>
  </data>
  <data name="End Time" xml:space="preserve">
    <value>Hora de finalización</value>
  </data>
  <data name="Every" xml:space="preserve">
    <value>Cada</value>
  </data>
  <data name="Friday" xml:space="preserve">
    <value>Viernes</value>
  </data>
  <data name="Group" xml:space="preserve">
    <value>Grupo</value>
  </data>
  <data name="Inactive" xml:space="preserve">
    <value>Inactivo</value>
  </data>
  <data name="Menu" xml:space="preserve">
    <value>Menú</value>
  </data>
  <data name="Monday" xml:space="preserve">
    <value>Lunes</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Nombre</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="No end" xml:space="preserve">
    <value>Sin fin</value>
  </data>
  <data name="Percent" xml:space="preserve">
    <value>Por ciento</value>
  </data>
  <data name="Please input the amount." xml:space="preserve">
    <value>Por favor ingrese la cantidad.</value>
  </data>
  <data name="Please input the name." xml:space="preserve">
    <value>Por favor ingrese el nombre.</value>
  </data>
  <data name="Please set the start date and end date correctly." xml:space="preserve">
    <value>Establezca la fecha de inicio y la fecha de finalización correctamente.</value>
  </data>
  <data name="Product" xml:space="preserve">
    <value>Producto</value>
  </data>
  <data name="Promotion Targets" xml:space="preserve">
    <value>Productos a Promocionar</value>
  </data>
  <data name="Recurring" xml:space="preserve">
    <value>Periódico</value>
  </data>
  <data name="Saturday" xml:space="preserve">
    <value>Sábado</value>
  </data>
  <data name="Schedule" xml:space="preserve">
    <value>Calendario</value>
  </data>
  <data name="Start Date" xml:space="preserve">
    <value>Fecha de inicio</value>
  </data>
  <data name="Start Time" xml:space="preserve">
    <value>Hora de inicio</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Estado</value>
  </data>
  <data name="Sub Category" xml:space="preserve">
    <value>Subcategoría</value>
  </data>
  <data name="Submit" xml:space="preserve">
    <value>Guardar</value>
  </data>
  <data name="Sunday" xml:space="preserve">
    <value>Domingo</value>
  </data>
  <data name="The promotion with same name already exist." xml:space="preserve">
    <value>La promoción con el mismo nombre ya existe.</value>
  </data>
  <data name="There was an error in processing the request." xml:space="preserve">
    <value>Hubo un error al procesar la solicitud.</value>
  </data>
  <data name="Thursday" xml:space="preserve">
    <value>Jueves</value>
  </data>
  <data name="Trigger on all items after first" xml:space="preserve">
    <value>Activar en todos los elementos después del primero</value>
  </data>
  <data name="Trigger on every" xml:space="preserve">
    <value>Activar en cada</value>
  </data>
  <data name="Tuesday" xml:space="preserve">
    <value>Martes</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Tipo</value>
  </data>
  <data name="Wednesday" xml:space="preserve">
    <value>Miércoles</value>
  </data>
  <data name="Week Days" xml:space="preserve">
    <value>Días de la semana</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Sí</value>
  </data>
</root>